<template>
  <div class="w-full space-y-6">
    <!-- Header and Alert Summary -->
    <div class="bg-white/5 rounded-xl p-4 md:p-6 shadow-lg border border-purple-600/10">
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
        <div>
          <h2 class="text-xl font-semibold text-white">Inventory Management</h2>
          <p class="text-white/60 text-sm mt-1">Manage and track your product inventory</p>
        </div>
        
        <!-- Alert Summary Box -->
        <div v-if="lowStockCount > 0 || outOfStockCount > 0" 
             class="bg-gradient-to-r from-orange-900/40 to-red-900/40 rounded-lg p-4 border border-red-500/30 min-w-[240px]">
          <h3 class="text-white font-medium mb-2">Inventory Alerts</h3>
          <div class="space-y-2">
            <div v-if="lowStockCount > 0" class="flex justify-between items-center">
              <span class="text-orange-300 text-sm flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                Low Stock Items:
              </span>
              <span class="text-white font-medium">{{ lowStockCount }}</span>
            </div>
            <div v-if="outOfStockCount > 0" class="flex justify-between items-center">
              <span class="text-red-400 text-sm flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
                Out of Stock:
              </span>
              <span class="text-white font-medium">{{ outOfStockCount }}</span>
            </div>
            <div v-if="needsRestockTodayCount > 0" class="flex justify-between items-center">
              <span class="text-yellow-300 text-sm flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Need Restock Today:
              </span>
              <span class="text-white font-medium">{{ needsRestockTodayCount }}</span>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Search and Filter Bar -->
      <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3 mb-6">
        <div class="relative flex-grow">
          <input 
            v-model="search" 
            type="text" 
            placeholder="Search by product name or ID..." 
            class="bg-[#081028] border border-purple-600/20 text-white rounded-lg px-4 py-2 pl-10 w-full"
          >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-400 absolute left-3 top-2.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        
        <select 
          v-model="categoryFilter" 
          class="bg-[#081028] border border-purple-600/20 text-white rounded-lg px-3 py-2 sm:w-44"
        >
          <option value="">All Categories</option>
          <option v-for="category in categories" :key="category" :value="category">{{ category }}</option>
        </select>
        
        <select 
          v-model="statusFilter" 
          class="bg-[#081028] border border-purple-600/20 text-white rounded-lg px-3 py-2 sm:w-44"
        >
          <option value="">All Status</option>
          <option value="in_stock">In Stock</option>
          <option value="low_stock">Low Stock</option>
          <option value="out_of_stock">Out of Stock</option>
        </select>
      </div>
      
      <!-- Products Table -->
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-[#0a1535]">
            <tr>
              <th @click="sortBy('id')" scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider cursor-pointer hover:text-white">
                ID
                <span v-if="sortColumn === 'id'" class="ml-1">{{ sortDirection === 'asc' ? '↑' : '↓' }}</span>
              </th>
              <th @click="sortBy('name')" scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider cursor-pointer hover:text-white">
                Product
                <span v-if="sortColumn === 'name'" class="ml-1">{{ sortDirection === 'asc' ? '↑' : '↓' }}</span>
              </th>
              <th @click="sortBy('category')" scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider cursor-pointer hover:text-white">
                Category
                <span v-if="sortColumn === 'category'" class="ml-1">{{ sortDirection === 'asc' ? '↑' : '↓' }}</span>
              </th>
              <th @click="sortBy('price')" scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider cursor-pointer hover:text-white">
                Price
                <span v-if="sortColumn === 'price'" class="ml-1">{{ sortDirection === 'asc' ? '↑' : '↓' }}</span>
              </th>
              <th @click="sortBy('current_stock')" scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider cursor-pointer hover:text-white">
                Stock
                <span v-if="sortColumn === 'current_stock'" class="ml-1">{{ sortDirection === 'asc' ? '↑' : '↓' }}</span>
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                Status
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                Forecast
              </th>
              <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody class="bg-[#050e26] divide-y divide-gray-800">
            <tr v-if="filteredProducts.length === 0">
              <td colspan="8" class="px-6 py-4 text-center text-white/60">
                No products found matching your criteria
              </td>
            </tr>
            <tr v-for="product in paginatedProducts" :key="product.id" class="hover:bg-[#0a1535]">
              <td class="px-6 py-4 whitespace-nowrap text-sm text-white/70">
                {{ product.id }}
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  <div class="h-10 w-10 flex-shrink-0">
                    <div class="h-10 w-10 rounded-full bg-purple-900/30 flex items-center justify-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                      </svg>
                    </div>
                  </div>
                  <div class="ml-4">
                    <div class="text-sm font-medium text-white">{{ product.name }}</div>
                    <div class="text-sm text-gray-400">ID: {{ product.id }}</div>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-white/80">
                {{ product.category }}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-white/80">
                ${{ product.price.toFixed(2) }}
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  <div :class="[
                    'text-sm font-medium',
                    product.status === 'in_stock' ? 'text-green-400' : 
                    product.status === 'low_stock' ? 'text-orange-300' : 'text-red-400'
                  ]">
                    {{ product.current_stock }}
                  </div>
                  <div class="text-xs text-white/60 ml-2">/ {{ product.min_stock_level }} min</div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span :class="[
                  'px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full',
                  product.status === 'in_stock' ? 'bg-green-900/30 text-green-400' : 
                  product.status === 'low_stock' ? 'bg-orange-900/30 text-orange-300' : 'bg-red-900/30 text-red-400'
                ]">
                  {{ product.status === 'in_stock' ? 'In Stock' : product.status === 'low_stock' ? 'Low Stock' : 'Out of Stock' }}
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm">
                <div v-if="product.current_stock <= product.min_stock_level">
                  <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-yellow-400 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span :class="[
                      product.forecast_days_until_restock === 0 ? 'text-red-400' : 
                      product.forecast_days_until_restock <= 3 ? 'text-orange-300' : 'text-yellow-200'
                    ]">
                      {{ product.forecast_days_until_restock === 0 ? 'Restock now' : 
                         `Restock in ${product.forecast_days_until_restock} days` }}
                    </span>
                  </div>
                  <div class="text-xs text-white/60 mt-1">
                    Order {{ product.reorder_quantity }} units
                  </div>
                </div>
                <div v-else class="text-white/60">
                  Sufficient stock
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button 
                  @click="openEditModal(product)" 
                  class="text-purple-400 hover:text-purple-300"
                >
                  Edit
                </button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      
      <!-- Pagination -->
      <div class="flex items-center justify-between border-t border-gray-700 px-4 py-3 sm:px-6 mt-4">
        <div class="flex flex-1 justify-between sm:hidden">
          <button 
            @click="currentPage > 1 ? currentPage-- : null" 
            :disabled="currentPage === 1"
            :class="[
              'relative inline-flex items-center px-4 py-2 border border-gray-700 text-sm font-medium rounded-md',
              currentPage === 1 ? 'text-gray-500 bg-[#081028] cursor-not-allowed' : 'text-white bg-[#0a1535] hover:bg-purple-800'
            ]"
          >
            Previous
          </button>
          <button 
            @click="currentPage < totalPages ? currentPage++ : null" 
            :disabled="currentPage === totalPages"
            :class="[
              'ml-3 relative inline-flex items-center px-4 py-2 border border-gray-700 text-sm font-medium rounded-md',
              currentPage === totalPages ? 'text-gray-500 bg-[#081028] cursor-not-allowed' : 'text-white bg-[#0a1535] hover:bg-purple-800'
            ]"
          >
            Next
          </button>
        </div>
        <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
          <div>
            <p class="text-sm text-white/60">
              Showing <span class="font-medium">{{ (currentPage - 1) * itemsPerPage + 1 }}</span> to <span class="font-medium">{{ Math.min(currentPage * itemsPerPage, filteredProducts.length) }}</span> of <span class="font-medium">{{ filteredProducts.length }}</span> products
            </p>
          </div>
          <div>
            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
              <button 
                @click="currentPage = 1" 
                :disabled="currentPage === 1"
                :class="[
                  'relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-700 bg-[#0a1535] text-sm font-medium',
                  currentPage === 1 ? 'text-gray-500 cursor-not-allowed' : 'text-white hover:bg-purple-800'
                ]"
              >
                <span class="sr-only">First</span>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
                </svg>
              </button>
              <button 
                @click="currentPage > 1 ? currentPage-- : null" 
                :disabled="currentPage === 1"
                :class="[
                  'relative inline-flex items-center px-2 py-2 border border-gray-700 bg-[#0a1535] text-sm font-medium',
                  currentPage === 1 ? 'text-gray-500 cursor-not-allowed' : 'text-white hover:bg-purple-800'
                ]"
              >
                <span class="sr-only">Previous</span>
                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
              </button>
              
              <button 
                v-for="page in displayedPages" 
                :key="page" 
                @click="currentPage = page"
                :class="[
                  'relative inline-flex items-center px-4 py-2 border border-gray-700 text-sm font-medium',
                  currentPage === page ? 'z-10 bg-purple-900 border-purple-500 text-white' : 'bg-[#0a1535] text-white hover:bg-purple-800'
                ]"
              >
                {{ page }}
              </button>
              
              <button 
                @click="currentPage < totalPages ? currentPage++ : null" 
                :disabled="currentPage === totalPages"
                :class="[
                  'relative inline-flex items-center px-2 py-2 border border-gray-700 bg-[#0a1535] text-sm font-medium',
                  currentPage === totalPages ? 'text-gray-500 cursor-not-allowed' : 'text-white hover:bg-purple-800'
                ]"
              >
                <span class="sr-only">Next</span>
                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
              </button>
              <button 
                @click="currentPage = totalPages" 
                :disabled="currentPage === totalPages"
                :class="[
                  'relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-700 bg-[#0a1535] text-sm font-medium',
                  currentPage === totalPages ? 'text-gray-500 cursor-not-allowed' : 'text-white hover:bg-purple-800'
                ]"
              >
                <span class="sr-only">Last</span>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5l7 7-7 7M5 5l7 7-7 7" />
                </svg>
              </button>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Edit Product Modal -->
  <div v-if="editModalOpen" class="fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4">
    <div class="bg-[#050e26] rounded-lg shadow-xl border border-purple-600/20 w-full max-w-lg overflow-hidden">
      <div class="flex justify-between items-center px-6 py-4 border-b border-gray-700">
        <h3 class="text-lg font-medium text-white">Edit Product</h3>
        <button @click="editModalOpen = false" class="text-gray-400 hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <div class="px-6 py-4">
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Product Name</label>
            <input 
              type="text" 
              v-model="editingProduct.name"
              class="bg-[#081028] border border-gray-700 text-white rounded-lg px-4 py-2 w-full"
              readonly
            >
          </div>
          
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-1">Category</label>
              <input 
                type="text" 
                v-model="editingProduct.category"
                class="bg-[#081028] border border-gray-700 text-white rounded-lg px-4 py-2 w-full"
                readonly
              >
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-1">Price</label>
              <input 
                type="number" 
                v-model="editingProduct.price"
                class="bg-[#081028] border border-gray-700 text-white rounded-lg px-4 py-2 w-full"
                readonly
              >
            </div>
          </div>
          
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-1">Current Stock</label>
              <input 
                type="number" 
                v-model="editingProduct.current_stock"
                class="bg-[#081028] border border-purple-600/40 text-white rounded-lg px-4 py-2 w-full"
              >
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-1">Min Stock Level</label>
              <input 
                type="number" 
                v-model="editingProduct.min_stock_level"
                class="bg-[#081028] border border-purple-600/40 text-white rounded-lg px-4 py-2 w-full"
              >
            </div>
          </div>
          
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-1">Reorder Quantity</label>
              <input 
                type="number" 
                v-model="editingProduct.reorder_quantity"
                class="bg-[#081028] border border-purple-600/40 text-white rounded-lg px-4 py-2 w-full"
              >
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-1">Supplier</label>
              <input 
                type="text" 
                v-model="editingProduct.supplier"
                class="bg-[#081028] border border-gray-700 text-white rounded-lg px-4 py-2 w-full"
                readonly
              >
            </div>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Last Restock Date</label>
            <input 
              type="date" 
              v-model="editingProduct.last_restock_date"
              class="bg-[#081028] border border-purple-600/40 text-white rounded-lg px-4 py-2 w-full"
            >
          </div>
        </div>
      </div>
      
      <div class="px-6 py-4 border-t border-gray-700 flex justify-end space-x-3">
        <button 
          @click="editModalOpen = false" 
          class="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg"
        >
          Cancel
        </button>
        <button 
          @click="saveProductChanges" 
          class="px-4 py-2 bg-purple-600 hover:bg-purple-500 text-white rounded-lg"
        >
          Save Changes
        </button>
      </div>
    </div>
  </div>
  
  <!-- Notification -->
  <div 
    v-if="notification.show" 
    :class="[
      'fixed bottom-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 flex items-center',
      notification.type === 'success' ? 'bg-green-900/90 text-green-100' : 'bg-red-900/90 text-red-100'
    ]"
  >
    <svg v-if="notification.type === 'success'" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
    </svg>
    <svg v-else xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
    {{ notification.message }}
  </div>
</template>

<script>
import { ref, computed, onMounted, watch } from 'vue';

export default {
  name: 'InventoryManagement',
  
  setup() {
    // Data
    const products = ref([]);
    const search = ref('');
    const categoryFilter = ref('');
    const statusFilter = ref('');
    const sortColumn = ref('id');
    const sortDirection = ref('asc');
    const currentPage = ref(1);
    const itemsPerPage = ref(10);
    const editModalOpen = ref(false);
    const editingProduct = ref({});
    const notification = ref({
      show: false,
      message: '',
      type: 'success' // or 'error'
    });
    
    // Fetch products
    const fetchProducts = async () => {
      try {
        const response = await fetch('/data/inventory.json');
        const data = await response.json();
        products.value = data.products;
      } catch (error) {
        console.error('Error loading inventory data:', error);
      }
    };
    
    // Initialize
    onMounted(() => {
      fetchProducts();
    });
    
    // Reset pagination when filters change
    watch([search, categoryFilter, statusFilter], () => {
      currentPage.value = 1;
    });
    
    // Computed properties
    const categories = computed(() => {
      const uniqueCategories = [...new Set(products.value.map(product => product.category))];
      return uniqueCategories.sort();
    });
    
    const filteredProducts = computed(() => {
      return products.value.filter(product => {
        const matchesSearch = search.value === '' || 
          product.name.toLowerCase().includes(search.value.toLowerCase()) ||
          product.id.toString().includes(search.value);
          
        const matchesCategory = categoryFilter.value === '' || 
          product.category === categoryFilter.value;
          
        const matchesStatus = statusFilter.value === '' || 
          product.status === statusFilter.value;
          
        return matchesSearch && matchesCategory && matchesStatus;
      }).sort((a, b) => {
        const aValue = a[sortColumn.value];
        const bValue = b[sortColumn.value];
        
        if (typeof aValue === 'string') {
          return sortDirection.value === 'asc' 
            ? aValue.localeCompare(bValue) 
            : bValue.localeCompare(aValue);
        } else {
          return sortDirection.value === 'asc' 
            ? aValue - bValue 
            : bValue - aValue;
        }
      });
    });
    
    // Pagination calculations
    const totalPages = computed(() => {
      return Math.ceil(filteredProducts.value.length / itemsPerPage.value);
    });
    
    const paginatedProducts = computed(() => {
      const startIndex = (currentPage.value - 1) * itemsPerPage.value;
      const endIndex = startIndex + itemsPerPage.value;
      return filteredProducts.value.slice(startIndex, endIndex);
    });
    
    // Generate array of page numbers to display
    const displayedPages = computed(() => {
      const maxPageButtons = 5;
      
      if (totalPages.value <= maxPageButtons) {
        return Array.from({ length: totalPages.value }, (_, i) => i + 1);
      }
      
      // Always show current page and adjacent pages
      let startPage = Math.max(1, currentPage.value - Math.floor(maxPageButtons / 2));
      let endPage = startPage + maxPageButtons - 1;
      
      if (endPage > totalPages.value) {
        endPage = totalPages.value;
        startPage = Math.max(1, endPage - maxPageButtons + 1);
      }
      
      return Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i);
    });
    
    // Alert calculations
    const lowStockCount = computed(() => {
      return products.value.filter(product => product.status === 'low_stock').length;
    });
    
    const outOfStockCount = computed(() => {
      return products.value.filter(product => product.status === 'out_of_stock').length;
    });
    
    const needsRestockTodayCount = computed(() => {
      return products.value.filter(product => 
        product.current_stock <= product.min_stock_level && 
        product.forecast_days_until_restock === 0
      ).length;
    });
    
    // Methods
    const sortBy = (column) => {
      if (sortColumn.value === column) {
        // Toggle sort direction if clicking the same column
        sortDirection.value = sortDirection.value === 'asc' ? 'desc' : 'asc';
      } else {
        // Set new sort column and default to ascending
        sortColumn.value = column;
        sortDirection.value = 'asc';
      }
    };
    
    const openEditModal = (product) => {
      // Create a deep copy to avoid directly modifying the original
      editingProduct.value = JSON.parse(JSON.stringify(product));
      editModalOpen.value = true;
    };
    
    const saveProductChanges = () => {
      try {
        // Find product index
        const index = products.value.findIndex(p => p.id === editingProduct.value.id);
        
        if (index !== -1) {
          // Update product data
          const product = products.value[index];
          
          // Update editable fields
          product.current_stock = parseInt(editingProduct.value.current_stock);
          product.min_stock_level = parseInt(editingProduct.value.min_stock_level);
          product.reorder_quantity = parseInt(editingProduct.value.reorder_quantity);
          product.last_restock_date = editingProduct.value.last_restock_date;
          
          // Update status based on new stock level
          if (product.current_stock === 0) {
            product.status = 'out_of_stock';
          } else if (product.current_stock <= product.min_stock_level) {
            product.status = 'low_stock';
          } else {
            product.status = 'in_stock';
          }
          
          // Show success notification
          showNotification('Product updated successfully', 'success');
        }
      } catch (error) {
        // Show error notification
        showNotification('Error updating product', 'error');
        console.error('Error updating product:', error);
      }
      
      // Close modal
      editModalOpen.value = false;
    };
    
    const showNotification = (message, type = 'success') => {
      notification.value = {
        show: true,
        message,
        type
      };
      
      // Auto-hide notification after 3 seconds
      setTimeout(() => {
        notification.value.show = false;
      }, 3000);
    };
    
    // Return everything needed in the template
    return {
      products,
      search,
      categoryFilter,
      statusFilter,
      sortColumn,
      sortDirection,
      currentPage,
      itemsPerPage,
      editModalOpen,
      editingProduct,
      notification,
      categories,
      filteredProducts,
      totalPages,
      paginatedProducts,
      displayedPages,
      lowStockCount,
      outOfStockCount,
      needsRestockTodayCount,
      sortBy,
      openEditModal,
      saveProductChanges
    };
  }
};
</script>
